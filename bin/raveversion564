#!/usr/bin/env ruby
require File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib', 'productdeploy'))
require 'rubygems'
require 'fog'
require 'fog/core/credentials'
require 'pp'



unless Fog.respond_to?('credentials')
   abort('Please create the .fog file with the right credentials') 
end


paches = %w{001}

params = {:output_type => 'stdout',
          :aws_access_key_id => Fog.credentials[:aws_access_key_id],
          :aws_secret_access_key => Fog.credentials[:aws_secret_access_key],
          :requested_patches_to_apply => paches,
          :rave_patches_bucket => 'aws-mdsol-dev-rave-patches-5.6.4',
          :db_name => 'raveawsrif',
          :store_patches_applied => true,
          :common_rave_path => 'C:\MedidataAPP\Sites',
          :web_relative_path => 'MedidataRAVE',
          :app_relative_path => 'RaveService',
          :viewers_relative_path => %w{RaveCrystalViewers\Viewer1 RaveCrystalViewers\Viewer2}
          }



cloud_type = ProductDeploy::Util.get_cloud_type
puts "This is a #{cloud_type} machine"

          
time = Benchmark.measure do
    case cloud_type
        when 'web' then  # we want to store the patches applied after patching viewer
                        params[:store_patches_applied] = false
                        run = ProductDeploy::WebPatch.new(params)
                        params[:store_patches_applied] = true
                        run = ProductDeploy::ViewerPatch.new(params)
        when 'app' then run = ProductDeploy::AppPatch.new(params)
        when 'db' then run = ProductDeploy::SqlPatch.new(params)
        
        else puts  "cloud type #{cloud_type} unknown, check medistrano cloud definition"
    end
    
    run.debug
end
puts time